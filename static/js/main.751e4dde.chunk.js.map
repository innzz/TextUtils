{"version":3,"sources":["components/TextForm.js","components/Navbar.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["TextForm","props","wordsLen","text","words","split","length","forEach","element","lettersLen","letters","countText","Array","from","count","space","index","_useState","useState","_useState2","Object","slicedToArray","setText","react_default","a","createElement","Fragment","className","style","color","concat","mode","heading","id","value","onChange","event","target","aria-label","backgroundColor","onClick","showAlert","newText","toUpperCase","toLowerCase","href","role","data-bs-toggle","aria-expanded","aria-labelledby","document","getElementById","innerHTML","char","emptySpace","Navbar","title","aria-current","toggle","type","modeText","defaultProps","about","Alert","alertMessage","msg","setAlertMessage","data-bs-dismiss","App","Mode","SetMode","_useState3","_useState4","setModeText","_useState5","_useState6","setalertMessage","showAlertMessage","message","setTimeout","components_Navbar","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOMClient","createRoot","render","src_App"],"mappings":"mMAEe,SAASA,EAASC,GAE/B,IAAMC,EAAW,SAACC,GAChB,IAAIC,EAAQD,EAAKE,MAAM,KACnBH,EAAWE,EAAME,OAMrB,OALAF,EAAMG,QAAQ,SAACC,GACG,KAAZA,GACFN,MAGGA,GAGHO,EAAa,SAACN,GAKhB,IAJF,IAAIO,EAAS,GACTC,EAAYC,MAAMC,KAAKV,GACrBW,EAAQ,EACRC,EAAQ,EACHC,EAAQ,EAAGA,EAAQL,EAAUL,OAAQU,IACnB,MAArBL,EAAUK,GACZF,IAGAC,IAKF,OAFAL,EAAO,KAAUI,EACjBJ,EAAO,WAAeK,EACfL,GA5ByBO,EA+BdC,mBAAS,IA/BKC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GA+B/Bd,EA/B+BgB,EAAA,GA+BzBG,EA/ByBH,EAAA,GAmEtC,OACEI,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACAH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,kBACXJ,EAAAC,EAAAC,cAAA,MAAIG,MAAO,CAACC,MAAK,GAAAC,OAAiB,UAAb7B,EAAM8B,KAAe,QAAQ,WAAa9B,EAAM+B,SACvET,EAAAC,EAAAC,cAAA,YAAUQ,GAAG,WAAWN,UAAU,eAAeO,MAAQ/B,EAAOgC,SAxB/C,SAACC,GAClBd,EAAQc,EAAMC,OAAOH,QAuBmEI,aAAW,gBAAgBV,MAAO,CAACC,MAAK,GAAAC,OAAiB,UAAb7B,EAAM8B,KAAe,QAAQ,SAAUQ,gBAAe,GAAAT,OAAiB,UAAb7B,EAAM8B,KAAe,QAAQ,cAC3NR,EAAAC,EAAAC,cAAA,OAAKQ,GAAG,UACRV,EAAAC,EAAAC,cAAA,UAAQE,UAAU,4BAA4Ba,QAvCjC,WACbvC,EAAMwC,UAAU,oCAAoC,WACpD,IAAIC,EAAUvC,EAAKwC,cACnBrB,EAAQoB,KAoCR,wBACAnB,EAAAC,EAAAC,cAAA,UAAQE,UAAU,4BAA4Ba,QAlChC,WAChBvC,EAAMwC,UAAU,oCAAoC,WACpD,IAAIC,EAAUvC,EAAKyC,cACnBtB,EAAQoB,KA+BN,wBACAnB,EAAAC,EAAAC,cAAA,UAAQE,UAAU,4BAA4Ba,QAxBjC,WACfvC,EAAMwC,UAAU,mBAAmB,WAEjCnB,EADc,MAsBd,cACFC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBACbJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,oCAAoCkB,KAAK,IAAIC,KAAK,SAASb,GAAG,mBAAmBc,iBAAe,WAAWC,gBAAc,QAAQpB,MAAO,CAACC,MAAK,GAAAC,OAAiB,UAAb7B,EAAM8B,KAAe,QAAQ,WAA5L,qBAIAR,EAAAC,EAAAC,cAAA,MAAIE,UAAU,gBAAgBM,GAAG,QAAQgB,kBAAgB,oBACvD1B,EAAAC,EAAAC,cAAA,MAAIE,UAAU,gBAAgBa,QAzBrB,WACCU,SAASC,eAAe,WAC9BC,UAAR,MAAAtB,OAA0B3B,EAA1B,UAuBmDoB,EAAAC,EAAAC,cAAA,kBAC/CF,EAAAC,EAAAC,cAAA,MAAIE,UAAU,gBAAgBa,QArBnB,WACDU,SAASC,eAAe,WAC9BC,UAAR,MAAAtB,OAA0B3B,EAA1B,UAmBqDoB,EAAAC,EAAAC,cAAA,uBAIrDF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YAAYC,MAAO,CAACC,MAAK,GAAAC,OAAiB,UAAb7B,EAAM8B,KAAe,QAAQ,WACvER,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,SAAIvB,EAASC,GAAb,cAA+BM,EAAWN,GAAMkD,KAAhD,mBAAsE5C,EAAWN,GAAMmD,WAAvF,YACA/B,EAAAC,EAAAC,cAAA,SAAI,KAAQvB,EAASC,GAArB,oCACAoB,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACfJ,EAAAC,EAAAC,cAAA,KAAGQ,GAAG,WAAY9B,MC3FxB,SAASoD,EAAOtD,GAEd,OACAsB,EAAAC,EAAAC,cAAA,OAAKE,UAAS,kCAAAG,OAAoC7B,EAAM8B,KAA1C,QAAAD,OAAqD7B,EAAM8B,OACvER,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBACbJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,eAAekB,KAAK,IAAIjB,MAAO,CAACC,MAAK,GAAAC,OAAiB,UAAb7B,EAAM8B,KAAe,QAAQ,WAAa9B,EAAMuD,OACtGjC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,2BAA2BM,GAAG,0BAC3CV,EAAAC,EAAAC,cAAA,MAAIE,UAAU,mCACZJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,YACZJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,kBAAkBM,GAAG,OAAOwB,eAAa,OAAOZ,KAAK,IAAIjB,MAAO,CAACC,MAAK,GAAAC,OAAiB,UAAb7B,EAAM8B,KAAe,QAAQ,WAApH,UAMJR,EAAAC,EAAAC,cAAA,OAAKE,UAAU,0BACbJ,EAAAC,EAAAC,cAAA,SAAOE,UAAU,mBAAmBa,QAASvC,EAAMyD,OAAQC,KAAK,WAAW1B,GAAG,2BAC9EV,EAAAC,EAAAC,cAAA,SAAOE,UAAU,mBAAmBC,MAAO,CAACC,MAAK,GAAAC,OAAiB,UAAb7B,EAAM8B,KAAe,QAAQ,WAAc9B,EAAM2D,cAchHL,EAAOM,aAAe,CACpBL,MAAO,iBACPM,MAAO,kBAGMP,QCtCA,SAASQ,EAAM9D,GAM5B,OACEA,EAAM+D,cAAgBzC,EAAAC,EAAAC,cAAA,WAClBF,EAAAC,EAAAC,cAAA,OAAKE,UAAS,eAAAG,OAAiB7B,EAAM+D,aAAaL,KAApC,gCAAwEb,KAAK,SACvFvB,EAAAC,EAAAC,cAAA,cAASxB,EAAM+D,aAAaL,KAAKhB,eADrC,IAC8D1C,EAAM+D,aAAaC,IAC7E1C,EAAAC,EAAAC,cAAA,UAAQkC,KAAK,SAASnB,QART,WACjBvC,EAAMiE,gBAAgB,OAO2BvC,UAAU,gBAAgBwC,kBAAgB,QAAQ7B,aAAW,YCAtH,IAAIN,EAAU,kBAoDCoC,MAlDf,WAAe,IAAAnD,EACUC,mBAAS,SADnBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACNoD,EADMlD,EAAA,GACDmD,EADCnD,EAAA,GAAAoD,EAEkBrD,mBAAS,oBAF3BsD,EAAApD,OAAAC,EAAA,EAAAD,CAAAmD,EAAA,GAENX,EAFMY,EAAA,GAEGC,EAFHD,EAAA,GAAAE,EAG0BxD,mBAAS,MAHnCyD,EAAAvD,OAAAC,EAAA,EAAAD,CAAAsD,EAAA,GAGNV,EAHMW,EAAA,GAGOC,EAHPD,EAAA,GAKPE,EAAmB,SAACC,EAAQnB,GAChCiB,EACE,CACEX,IAAKa,EACLnB,KAAMA,IAGVoB,WAAW,WACTH,EAAgB,OAChB,MAmBJ,OACErD,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KAEAH,EAAAC,EAAAC,cAACuD,EAAD,CAAQxB,MAAM,YAAYM,MAAQ,WAAW/B,KAAMsC,EAAMX,OAnB5C,WACA,UAATW,GACFC,EAAQ,QACRG,EAAY,qBACZI,EAAiB,oBAAoB,WACrC3B,SAAS+B,KAAKrD,MAAMW,gBAAkB,YAItC+B,EAAQ,SACRG,EAAY,oBACZI,EAAiB,qBAAqB,WACpC3B,SAAS+B,KAAKrD,MAAMW,gBAAkB,UAO+BqB,SAAYA,IACrFrC,EAAAC,EAAAC,cAACsC,EAAD,CAAOC,aAAgBA,EAAcY,gBAAiBA,IAClDrD,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACfJ,EAAAC,EAAAC,cAACzB,EAAD,CAAUgC,QAAUA,EAAUD,KAAMsC,EAAM5B,UAAcoC,OCzCjDK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAA8CD,EAA9CC,OAAQC,EAAsCF,EAAtCE,OAAQC,EAA8BH,EAA9BG,OAAQC,EAAsBJ,EAAtBI,OAAQC,EAAcL,EAAdK,QAC3DJ,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAOV,GACPW,EAAQX,MCMDY,IAAeC,WAAW9C,SAASC,eAAe,SAC1D8C,OAAO1E,EAAAC,EAAAC,cAACyE,EAAD,OAKZhB","file":"static/js/main.751e4dde.chunk.js","sourcesContent":["import React, {useState} from 'react'\n\nexport default function TextForm(props) {\n\n  const wordsLen = (text)=>{\n    let words = text.split(\" \");\n    let wordsLen = words.length;\n    words.forEach((element) => {\n      if (element === '') {\n        wordsLen--;\n      }\n    });\n    return wordsLen;\n  } \n\n  const lettersLen = (text)=>{\n    let letters ={}\n    let countText = Array.from(text);\n      let count = 0;\n      let space = 0;\n      for (let index = 0; index < countText.length; index++) {\n        if (countText[index] !== ' ') {\n          count++;\n        }\n        else{\n          space++;\n        }\n      }\n        letters['char']= count;\n        letters['emptySpace']=space;\n        return letters;\n  }\n\n  const [text, setText] = useState('');\n\n\n  const toUpCase = ()=>{\n      props.showAlert('your text converted to upper case','success');\n      let newText = text.toUpperCase();\n      setText(newText);\n    }\n\n  const toLowCase = ()=>{\n    props.showAlert('your text converted to lower case','success');\n    let newText = text.toLowerCase();\n    setText(newText);\n\n    }\n\n  const onChangeFunc = (event)=>{\n      setText(event.target.value);\n    }\n\n  const clearAll = ()=>{\n    props.showAlert('All text cleared','success');\n      let newText = '';\n      setText(newText);\n    }\n\n  const toBold = ()=>{\n    let preview = document.getElementById('preview');\n    preview.innerHTML = `<b>${text}</b>`;\n  }\n\n  const toItalic = ()=>{\n    let preview = document.getElementById('preview');\n    preview.innerHTML = `<i>${text}</i>`;\n  }\n\n  return (\n    <>\n    <div className='container my-5'>\n        <h1 style={{color:`${props.mode==='light'?'black':'white'}`}}>{props.heading}</h1>\n      <textarea id=\"textArea\" className=\"form-control\" value={ text } onChange={onChangeFunc} aria-label=\"With textarea\" style={{color:`${props.mode==='light'?'black':'white'}`,backgroundColor:`${props.mode==='light'?'white':'#52535a'}`}}></textarea>\n      <div id=\"alert\"></div>\n      <button className=\"btn btn-primary my-3 mx-3\" onClick={toUpCase}>convert to UPPERCASE</button>\n      <button className=\"btn btn-primary my-3 mx-3\" onClick={toLowCase}>CONVERT to lowercase</button>\n      <button className=\"btn btn-primary my-3 mx-3\" onClick={clearAll}>Clear text</button>\n    <div className=\"dropdown mx-3\">\n      <a className=\"btn btn-secondary dropdown-toggle\" href=\"/\" role=\"button\" id=\"dropdownMenuLink\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\" style={{color:`${props.mode==='light'?'black':'white'}`}}>\n        Change font style\n      </a>\n\n      <ul className=\"dropdown-menu\" id=\"fonts\" aria-labelledby=\"dropdownMenuLink\">\n        <li className=\"dropdown-item\" onClick={toBold}><b>BOLD</b></li>\n        <li className=\"dropdown-item\" onClick={toItalic}><i>ITALIC</i></li>\n      </ul>\n    </div>\n   </div>\n    <div className=\"container\" style={{color:`${props.mode==='light'?'black':'white'}`}}>\n      <h2>Your text summary</h2>\n      <p>{wordsLen(text)} words and {lettersLen(text).char} characters and {lettersLen(text).emptySpace} spaces.</p>\n      <p>{0.125 * wordsLen(text)} minutes will take to read this.</p>\n      <h3>Preview</h3>\n      <div className=\"container\">\n      <p id=\"preview\" >{text}</p>\n      </div>\n    </div>\n    </>\n  )\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Link} from 'react-router-dom'\n\nfunction Navbar(props) {\n\n  return (\n  <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\n    <div className=\"container-fluid\">\n      <a className=\"navbar-brand\" href=\"#\" style={{color:`${props.mode==='light'?'black':'white'}`}}>{props.title}</a>\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n          <li className=\"nav-item\">\n            <a className=\"nav-link active\" id=\"home\" aria-current=\"page\" href=\"#\" style={{color:`${props.mode==='light'?'black':'white'}`}} >Home</a>\n          </li>\n          {/* <li className=\"nav-item\">\n            <a className=\"nav-link active\" aria-current=\"page\" to=\"#\" style={{color:`${props.mode==='light'?'black':'white'}`}} >{props.about}</a>\n          </li> */}\n        </ul>\n        <div className=\"form-check form-switch\">\n          <input className=\"form-check-input\" onClick={props.toggle} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\n          <label className=\"form-check-label\" style={{color:`${props.mode==='light'?'black':'white'}`}}>{ props.modeText }</label>\n        </div>\n      </div>\n    </div>\n  </nav>\n  )\n}\n\n\nNavbar.propTypes = {\n  title: PropTypes.string,\n  about: PropTypes.string\n}\n\nNavbar.defaultProps = {\n  title: 'set title here',\n  about: 'set about here'\n}\n\nexport default Navbar;\n","import React from 'react'\n\nexport default function Alert(props) {\n\n    const dismissAlert = ()=>{\n        props.setAlertMessage(null);\n    };\n\n  return (\n    props.alertMessage && <div>\n        <div className={`alert alert-${props.alertMessage.type} alert-dismissible fade show`} role=\"alert\">\n            <strong>{props.alertMessage.type.toUpperCase()}</strong> {props.alertMessage.msg}\n            <button type=\"button\" onClick={dismissAlert} className='btn btn-close' data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\n        </div>\n    </div>\n  )\n}\n","import './App.css';\nimport TextForm from './components/TextForm';\nimport Navbar from './components/Navbar';\n// import About from './components/About';\nimport Alert from './components/Alert';\nimport React, {useState} from 'react'\n// import {\n//   BrowserRouter,\n//   Routes,\n//   Route,\n// } from \"react-router-dom\";\n\nlet heading = \"Enter your text\"; \n\nfunction App() {\n  const [Mode,SetMode] = useState('light');\n  const [modeText,setModeText] = useState('Enable Dark Mode');\n  const [alertMessage,setalertMessage] = useState(null);\n\n  const showAlertMessage = (message,type)=>{\n    setalertMessage(\n      {\n        msg: message,\n        type: type\n      }\n    )\n    setTimeout(() => {\n      setalertMessage(null);\n    },3000);\n  }\n\n  const toggle = ()=>{\n    if (Mode === 'light') {\n      SetMode('dark');\n      setModeText('Disable Dark Mode');\n      showAlertMessage('Dark Mode enabled','success');\n      document.body.style.backgroundColor = '#0e132e';\n    }\n    else\n    {\n      SetMode('light');\n      setModeText('Enable Dark Mode');\n      showAlertMessage('Dark Mode disabled','success');\n        document.body.style.backgroundColor = 'white';\n      }\n  };\n\n  return (\n    <>\n    {/* <BrowserRouter> */}\n    <Navbar title=\"TextUtils\" about = \"About Us\" mode={Mode} toggle={toggle} modeText = {modeText}/>\n    <Alert alertMessage = {alertMessage} setalertMessage={setalertMessage}/>\n        <div className=\"container\">\n        <TextForm heading={ heading } mode={Mode} showAlert = { showAlertMessage }/>\n      {/* <Routes> */}\n        {/* <Route exact path=\"/\" element={<TextForm heading={ heading } mode={Mode} showAlert = { showAlertMessage }/>} /> */}\n        {/* <Route exact path=\"/About\" element={<About mode={Mode}/>} /> */}\n      {/* </Routes> */}\n    </div>\n    {/* </BrowserRouter> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOMClient from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\nconst root = ReactDOMClient.createRoot(document.getElementById('root'));\nroot.render(<App />)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}